
과제 : 클린 아키텍처 구현
아키텍처와 테스트 코드 작성에 집중하며, 견고하고 유연한 서버 개발이 목표인 사람 (챌린지 과제가 포함되어 있습니다)
필수 과제 - 로직 구현 및 테스트코드 작성
각 시나리오별 하기 비즈니스 로직 개발 및 단위 테스트 작성
e-commerce : 상품 조회, 주문/결제 기능, 포인트 충전 기능
concert : 콘서트 조회, 예약/결제 기능, 포인트 충전 기능


단, 비지니스 로직에서 다음을 따라야 합니다.
한개의 비지니스 로직을 클린아키텍처로 구현하고 다른 비지니스 로직은 레이어드로 구현할것 
“e-커머스 시나리오에서 '주문/결제 기능'을 클린 아키텍처로 구현”
도메인 로직이 복잡
여러 모듈(예: 결제 게이트웨이, 재고 관리, 사용자 관리 등)과 상호작용해야 해서 클린 아키텍처의 장점을 살리기 좋기 때문
“콘서트 시나리오에서는 '예약/결제 기능'을 클린 아키텍처로 구현”
좌석 예약, 결제 프로세스, 알림 발송 등 여러 기능이 유기적으로 결합되어 있어서 클린 아키텍처를 적용하면 각 책임을 명확히 분리하고 테스트하기 쉬움


여러 기능 Mock을 적극 활용해주세요
예를들어
주문/결제 기능 테스트 시에는 ProductRepository, UserRepository, PaymentGateway, EventPublisher 등은 모두 Mock으로 대체하고,
OrderUseCase 자체의 도메인 로직만 검증하도록 작성해야 합니다.
이는 외부 시스템에 의존하지 않고도 순수한 비즈니스 로직 테스트가 가능하게 하기 위함입니다.
좌석 예약/결제 기능에서는 SeatRepository, ReservationRepository, PaymentService 등을 전부 Mock 처리하고,
좌석 점유/해제, 결제 완료 처리 등의 예약 로직만 검증하도록 작성합니다.
단위 테스트 는 반드시 대상 객체/기능 에 대한 의존성만 존재해야 함


(선택)심화 과제 - 심화 로직 구현 및 테스트코드 작성
각 시나리오별 하기 비즈니스 로직 개발 및 단위 테스트 작성
e-commerce : 선착순 쿠폰 관련 기능
concert : 대기열 관련 기능
단위 테스트 는 반드시 대상 객체/기능 에 대한 의존성만 존재해야 함
심화 과제까지 마무리한 후에는, 로그인 기능등 남은 요구사항들도 차례로 확장해보는 것을 추천드립니다~!